#!/usr/bin/env node
'use strict';

const program = require('commander');
const log = require('../lib/log');
const co = require('co');
const util = require('util');
const fs = require('fs-extra');
const path = require('path');
const postInit = require('../lib/post_init');
const tar = require('tar');
const npm = require('npm');
const os = require('os');

program
  .option('-t, --template [value]', 'simple')
  .option('-u, --update', 'update an existing directory')
  .option('-s, --scope [value]', 'specify the npm scope')
  .option('--registry [value]', 'specify the npm registry')
  .parse(process.argv);

/**
 * hc-boilerplate-simple
 */
let template = program.template || 'simple';
let scope = program.scope || '';
let registry = program.registry;
let dir = program.args[0] || '.';

if (!program.update && fs.existsSync(dir)) {
  let content = fs.readdirSync(dir);

  if (content.length) {
    console.error(`path '${dir}' already exists and is not an empty directory`);
    process.exit(1);
  }
}
if (scope && !scope.startsWith('@')) {
  scope = '@' + scope;
}
if (!registry) {
  const jsonPath = path.join(os.homedir(), '.honeycomb.json');

  if (fs.existsSync(jsonPath)) {
    try {
      registry = require(jsonPath).registry;
    } catch (e) {
      // do nothing
    }
  }

  if (!registry) {
    registry = 'https://registry.npmjs.org/';
  }
}

/**
 * npm pack will download a tarball
 * tar -k will skip exist files
 * --strip-components 1 will remove a leading path
 */

const npmLoad = util.promisify(npm.load);
const npmPack = util.promisify(npm.pack);
const unLink = util.promisify(fs.unlink);
co(function* () {
  yield npmLoad({registry});
  console.log('begin to download tarball');
  const info = yield npmPack(`${scope ? scope + '/' : ''}hc-boilerplate-${template}`);
  const filename = info[0].filename;
  yield fs.mkdirp(dir);
  yield tar.x({
    strip: 1,
    file: filename,
    C: dir
  });
  yield unLink(filename);
  postInit(dir);
  log.info('init success');
  process.exit(0);
}).catch(e => {
  console.log('init fail', e.message);
  process.exit(1);
});


